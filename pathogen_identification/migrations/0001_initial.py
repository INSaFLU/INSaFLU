# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-11-17 15:12
from __future__ import unicode_literals

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("managing_files", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ContigClassification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("performed", models.BooleanField(default=False)),
                ("method", models.CharField(blank=True, max_length=250, null=True)),
                ("args", models.CharField(blank=True, max_length=250, null=True)),
                ("db", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "contig_classification_report",
                    models.CharField(blank=True, max_length=300, null=True),
                ),
                ("classification_number", models.IntegerField(blank=True, null=True)),
                ("classification_minhit", models.IntegerField(blank=True, null=True)),
                ("success", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["method"],
            },
        ),
        migrations.CreateModel(
            name="FinalReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                ("unique_id", models.CharField(blank=True, max_length=20, null=True)),
                ("reference_length", models.IntegerField(blank=True, null=True)),
                ("taxid", models.CharField(blank=True, max_length=20, null=True)),
                ("simple_id", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                ("ref_db", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "reference_contig_str",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("accid", models.CharField(blank=True, max_length=20, null=True)),
                ("coverage", models.FloatField(blank=True, null=True)),
                ("depth", models.FloatField(blank=True, null=True)),
                ("depthR", models.FloatField(blank=True, null=True)),
                ("mapped_reads", models.IntegerField(blank=True, null=True)),
                ("ref_proportion", models.FloatField(blank=True, null=True)),
                ("mapped_proportion", models.FloatField(blank=True, null=True)),
                ("ngaps", models.IntegerField(blank=True, null=True)),
                (
                    "mapping_success",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "classification_success",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("refa_dotplot", models.TextField(blank=True, null=True)),
                ("refa_dotplot_exists", models.BooleanField(default=False)),
                ("covplot", models.TextField(blank=True, null=True)),
                ("covplot_exists", models.BooleanField(default=False)),
                ("bam_path", models.CharField(blank=True, max_length=400, null=True)),
                ("bai_path", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "reference_path",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
                (
                    "reference_index_path",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
                (
                    "reference_assembly_paf",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
                (
                    "mapped_scaffolds_path",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
                (
                    "mapped_scaffolds_index_path",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ParameterSet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Not started"),
                            (1, "Running"),
                            (2, "Finished"),
                            (3, "Error"),
                            (4, "Queued"),
                        ],
                        default=0,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PIProject_Sample",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "name_extended",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                ("type", models.CharField(blank=True, max_length=10, null=True)),
                ("combinations", models.IntegerField(blank=True, default=0)),
                ("input", models.TextField(blank=True, null=True)),
                ("technology", models.CharField(blank=True, max_length=100, null=True)),
                ("report", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "creation_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="uploaded date"
                    ),
                ),
                ("is_finished", models.BooleanField(default=False)),
                ("is_deleted", models.BooleanField(default=False)),
                ("is_error", models.BooleanField(default=False)),
                ("is_mask_consensus_sequences", models.BooleanField(default=False)),
                ("alert_first_level", models.IntegerField(default=0)),
                ("alert_second_level", models.IntegerField(default=0)),
                (
                    "seq_name_all_consensus",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("is_deleted_in_file_system", models.BooleanField(default=False)),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date attached"
                    ),
                ),
                ("running_processes", models.IntegerField(default=0)),
            ],
            options={
                "ordering": ["project__id", "-creation_date"],
            },
        ),
        migrations.CreateModel(
            name="Processed",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_processed", models.DateTimeField(auto_now_add=True)),
                (
                    "parameter_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.ParameterSet",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Projects",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        null=True,
                        verbose_name="Project name",
                    ),
                ),
                ("description", models.TextField(default="")),
                (
                    "technology",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        null=True,
                        verbose_name="Technology",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="uploaded date"
                    ),
                ),
                (
                    "last_change_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last change date"
                    ),
                ),
                ("is_deleted", models.BooleanField(default=False)),
                ("number_passed_sequences", models.SmallIntegerField(default=-1)),
                ("is_deleted_in_file_system", models.BooleanField(default=False)),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date attached"
                    ),
                ),
                (
                    "results",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        null=True,
                        verbose_name="Results",
                    ),
                ),
                ("running_processes", models.IntegerField(default=0)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["project__id", "-creation_date"],
            },
        ),
        migrations.CreateModel(
            name="QC_REPORT",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "report_source",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("QC_report", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.PIProject_Sample",
                    ),
                ),
            ],
            options={
                "ordering": ["sample"],
            },
        ),
        migrations.CreateModel(
            name="RawReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Mapped"), (1, "Unmapped"), (2, "Mapping")],
                        default=1,
                    ),
                ),
                ("taxid", models.CharField(blank=True, max_length=100, null=True)),
                ("accid", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("counts", models.IntegerField(blank=True, null=True)),
                (
                    "classification_source",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReadClassification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("performed", models.BooleanField(default=False)),
                ("method", models.CharField(blank=True, max_length=20, null=True)),
                ("args", models.CharField(blank=True, max_length=250, null=True)),
                ("db", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "read_classification_report",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                ("classification_number", models.IntegerField(blank=True, null=True)),
                ("classification_minhit", models.IntegerField(blank=True, null=True)),
                ("success", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["method"],
            },
        ),
        migrations.CreateModel(
            name="ReferenceContigs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("contig", models.CharField(blank=True, max_length=100, null=True)),
                ("depth", models.CharField(blank=True, max_length=100, null=True)),
                ("depthr", models.CharField(blank=True, max_length=100, null=True)),
                ("coverage", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "ordering": ["reference"],
            },
        ),
        migrations.CreateModel(
            name="ReferenceMap_Main",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                ("taxid", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "reference_contig_str",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("report", models.CharField(blank=True, max_length=200, null=True)),
                ("plotly_dotplot", models.TextField(blank=True, null=True)),
                (
                    "bam_file_path",
                    models.CharField(blank=True, max_length=350, null=True),
                ),
                (
                    "bai_file_path",
                    models.CharField(blank=True, max_length=350, null=True),
                ),
                (
                    "fasta_file_path",
                    models.CharField(blank=True, max_length=350, null=True),
                ),
                (
                    "fai_file_path",
                    models.CharField(blank=True, max_length=350, null=True),
                ),
                (
                    "mapped_subset_r1",
                    models.CharField(blank=True, max_length=350, null=True),
                ),
                (
                    "mapped_subset_r2",
                    models.CharField(blank=True, max_length=350, null=True),
                ),
            ],
            options={
                "ordering": ["reference"],
            },
        ),
        migrations.CreateModel(
            name="RunAssembly",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("performed", models.BooleanField(default=False)),
                (
                    "assembly_contigs",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("method", models.CharField(blank=True, max_length=20, null=True)),
                ("args", models.CharField(blank=True, max_length=50, null=True)),
                ("contig_number", models.IntegerField(blank=True, null=True)),
                ("contig_max", models.CharField(blank=True, max_length=100, null=True)),
                ("contig_min", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "contig_mean",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "contig_trim",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "ordering": ["method"],
            },
        ),
        migrations.CreateModel(
            name="RunDetail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                ("max_depth", models.FloatField(blank=True, null=True)),
                ("max_depthR", models.FloatField(blank=True, null=True)),
                ("max_gaps", models.IntegerField(blank=True, null=True)),
                ("max_prop", models.FloatField(blank=True, null=True)),
                ("max_mapped", models.IntegerField(blank=True, null=True)),
                ("input", models.CharField(blank=True, max_length=300, null=True)),
                ("processed", models.CharField(blank=True, max_length=300, null=True)),
                ("processed_percent", models.FloatField(blank=True, null=True)),
                ("sift_preproc", models.BooleanField()),
                ("sift_remap", models.BooleanField()),
                (
                    "sift_removed_pprc",
                    models.CharField(blank=True, max_length=300, null=True),
                ),
                (
                    "processing_final",
                    models.CharField(blank=True, max_length=300, null=True),
                ),
                ("processing_final_percent", models.FloatField(blank=True, null=True)),
                ("merged", models.BooleanField()),
                ("merged_number", models.IntegerField(blank=True, null=True)),
                (
                    "merged_files",
                    models.CharField(blank=True, max_length=300, null=True),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RunIndex",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.Projects",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="managing_files.Sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RunMain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("suprun", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "params_file_path",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                (
                    "processed_reads_r1",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "processed_reads_r2",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("enrichment", models.CharField(blank=True, max_length=20, null=True)),
                ("enrichment_performed", models.BooleanField()),
                (
                    "enrichment_args",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "enrichment_db",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "host_depletion",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("host_depletion_performed", models.BooleanField()),
                (
                    "host_depletion_args",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "host_depletion_db",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "reads_after_processing",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "reads_proc_percent",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "assembly_performed",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "assembly_method",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "assembly_max",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "read_classification",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "contig_classification",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("remap", models.CharField(blank=True, max_length=50, null=True)),
                ("remap_args", models.CharField(blank=True, max_length=50, null=True)),
                ("finished", models.CharField(blank=True, max_length=10, null=True)),
                ("runtime", models.CharField(blank=True, max_length=100, null=True)),
                ("report", models.CharField(blank=True, max_length=200, null=True)),
                ("static_dir", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "parameter_set",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="run_main",
                        to="pathogen_identification.ParameterSet",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.Projects",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.PIProject_Sample",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RunRemapMain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("merged_log", models.CharField(blank=True, max_length=350, null=True)),
                ("performed", models.BooleanField(default=False)),
                ("method", models.CharField(blank=True, max_length=350, null=True)),
                ("found_total", models.IntegerField(blank=True, null=True)),
                ("coverage_minimum", models.IntegerField(blank=True, null=True)),
                ("coverage_maximum", models.IntegerField(blank=True, null=True)),
                ("success", models.IntegerField(blank=True, null=True)),
                ("remap_plan", models.CharField(blank=True, max_length=350, null=True)),
                (
                    "run",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.RunMain",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.PIProject_Sample",
                    ),
                ),
            ],
            options={
                "ordering": ["method"],
            },
        ),
        migrations.CreateModel(
            name="SampleQC",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("software", models.CharField(blank=True, max_length=100, null=True)),
                ("qc_type", models.CharField(blank=True, max_length=100, null=True)),
                ("encoding", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "input_reads",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "processed_reads",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("percent_passed", models.FloatField(blank=True, null=True)),
                (
                    "sequence_length",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("percent_gc", models.FloatField(blank=True, null=True)),
                (
                    "input_fastqc_report",
                    models.FileField(
                        blank=True, null=True, upload_to="input_fastqc_report"
                    ),
                ),
                (
                    "processed_fastqc_report",
                    models.FileField(
                        blank=True, null=True, upload_to="processed_fastqc_report"
                    ),
                ),
                (
                    "ParameterSet",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sample_qc",
                        to="pathogen_identification.ParameterSet",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.PIProject_Sample",
                    ),
                ),
            ],
            options={
                "ordering": ["sample"],
            },
        ),
        migrations.CreateModel(
            name="SoftwareTree",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                ("date_created", models.DateTimeField(auto_now_add=True, null=True)),
                ("global_index", models.IntegerField(default=0)),
                ("technology", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "ordering": ["global_index"],
            },
        ),
        migrations.CreateModel(
            name="SoftwareTreeNode",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("index", models.SmallIntegerField(default=-1)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        null=True,
                        verbose_name="Software name",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        blank=True, db_index=True, max_length=200, null=True
                    ),
                ),
                (
                    "node_type",
                    models.CharField(
                        blank=True, db_index=True, max_length=200, null=True
                    ),
                ),
                ("node_place", models.SmallIntegerField(default=0)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="pathogen_identification.SoftwareTreeNode",
                    ),
                ),
                (
                    "software_tree",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pathogen_identification.SoftwareTree",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Submitted",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_submitted", models.DateTimeField(auto_now_add=True)),
                (
                    "parameter_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_fastq_input",
                        to="pathogen_identification.ParameterSet",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="rundetail",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="rundetail",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
        migrations.AddField(
            model_name="runassembly",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="runassembly",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
        migrations.AddField(
            model_name="referencemap_main",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="referencemap_main",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
        migrations.AddField(
            model_name="referencecontigs",
            name="reference",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.ReferenceMap_Main",
            ),
        ),
        migrations.AddField(
            model_name="referencecontigs",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="readclassification",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="readclassification",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
        migrations.AddField(
            model_name="rawreference",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="piproject_sample",
            name="project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="project_samples",
                to="pathogen_identification.Projects",
            ),
        ),
        migrations.AddField(
            model_name="piproject_sample",
            name="sample",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="managing_files.Sample"
            ),
        ),
        migrations.AddField(
            model_name="parameterset",
            name="leaf",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="pathogen_identification.SoftwareTreeNode",
            ),
        ),
        migrations.AddField(
            model_name="parameterset",
            name="project",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.Projects",
            ),
        ),
        migrations.AddField(
            model_name="parameterset",
            name="sample",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
        migrations.AddField(
            model_name="finalreport",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="finalreport",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
        migrations.AddField(
            model_name="contigclassification",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.RunMain",
            ),
        ),
        migrations.AddField(
            model_name="contigclassification",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="pathogen_identification.PIProject_Sample",
            ),
        ),
    ]
